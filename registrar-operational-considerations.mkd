---
title: Operational Considerations for BRSKI Registrar
abbrev: Registrar Considerations
docname: draft-richardson-anima-registrar-considerations-00

# stand_alone: true

ipr: trust200902
area: Internet
wg: anima Working Group
kw: Internet-Draft
cat: std

coding: us-ascii
pi:    # can use array (if all yes) or hash here
  toc: yes
  sortrefs:   # defaults to yes
  symrefs: yes

author:


- ins: M. Richardson
  name: Michael Richardson
  org: Sandelman Software Works
  email: mcr+ietf@sandelman.ca

normative:
  BCP14: RFC8174
  I-D.ietf-anima-bootstrapping-keyinfra:
  I-D.ietf-anima-autonomic-control-plane:
  I-D.ietf-acme-star:
  I-D.ietf-anima-constrained-voucher:

informative:
  RFC7030:
  I-D.richardson-anima-state-for-joinrouter:
  RFC8555:
  I-D.friel-acme-integrations:
  WebPKI:
    target: "https://cabforum.org/wp-content/uploads/BRv1.2.2.pdf"
    author:
      ins: "CA/Browser Forum"
    title: "CA/Browser Forum Baseline Requirements for the Issuance and Management of Publicly-Trusted Certificates, v.1.2.2"
    date: "October 2014"

  ieee802-1AR:
    target: "http://standards.ieee.org/findstds/standard/802.1AR-2009.html"
    title: "IEEE 802.1AR Secure Device Identifier"
    author:
      ins: "IEEE Standard"
    date: 2009

--- abstract

This document describes a number of operational modes that a
BRSKI Registration Authority (Registrar) may take on.

Each mode is defined, and then each mode is given a relevance
within an over applicability of what kind of organization the
Registrar is deployed into.
This document does not change any protocol mechanisms.

This document includes operational advice about avoiding unwanted
consequences.

--- middle

# Introduction

{{I-D.ietf-anima-bootstrapping-keyinfra}} introduces a mechanism for
new devices (called pledges) to be onboarded into a network without
intervention from an expert operator.

A key aspect of this is that there has to be a thing for the pledge to join!
{{I-D.ietf-anima-bootstrapping-keyinfra}} refers to this thing as the
"Domain", identified technically by the "DomainID".  The domain is embodied
by the Registrar component. Membership in the domain is proven by
possession of a valid Local DeviceID, a form of {{ieee802-1AR}} certificate.

The Registrar is the component that implements the domain, authorizing new devices (pledges) to join.  Proper and efficient operation of the Registrar is key aspect for the Autonomic mechanisms, and for enabling secure onboarding.

This document provides implementation, deployment and operational guidance for the BRSKI Registrar.

There are however several classes of operator of a local domain: ISP and large
managed multi-side Enterprises are the primary target for this document.
Medium sized single site Enterprises and Industrial Plant users are a
secondary target for this document.  Unmanaged small enterprises and home
users are addressed in a separate section at the end as special case.

This document first introduces the different scales of deployment as a reference for further discussion and contrasts, and then provides analyses some consequences of architectural choices that may be appropriate for different scales of deployments.

The document includes security best practices for the management of the certificates and the certificate authorities.

## Terminology

::boilerplate bcp14

This document, while a Best Current Practices, makes use of BCP14 language to indicate which
practices are mandatory, and which ones are just recommendations.

## Reference Network and Diagrams

In order to deal with the full complexity and generality of operations, the
reference network described herein is a bit more complicated than many
networks actually are.

### Tier-1 Network

In this guide one target is a world-wide Tier-1 ISP.  It has three network
operations centers (NOC), the two major ones in Frankfurt and Denver, with an
secondary center located in Perth, Australia.  The exact location of these
NOCs is not important: the locations have been chosen to have an hour
overlap in their 8-6 daytime shift, typical of world-wide operations.
This overlap is also not important, it just adds a degree of realism to this
discussion.  The use of actual names makes subsequent discussion about
failures easier.

{:tier1isp: artwork-align="center"}
~~~~ WHOLEFLOW
{::include tier1isp.txt}
~~~~
{:tier1isp title="Reference Tier-1 ISP network"}

### Enterprise Network

A second target is a medium Enterprise that has a single (probably on-premise) data
center.  The Enterprise has Information Technology (IT) operations that
include the routers and systems supporting it's office staff in it's
buildings.  It has Building Operations which integrates the IoT devices found
in the buildings that it owns, and it has Operations Technology (OT) that
manages the automated systems in it's on-site manufacturing facilities.

INSERT DIAGRAM

### Home Network

A third target is a resident with a single CPE device.  The home owner has a
few medium sized devices (a home NAS) as well as a few IoT devices (light
bulbs, clothes washing machine).

## Internal architectural view

A Registrar will have four major interfaces, connected together by a common database.

{:jrcarch: artwork-align="center"}
~~~~ ARCHVIEW
{::include basic-architecture.txt}
~~~~
{:tier1isp #tier1isp title="Reference Internal Architecture for Registrar"}

### Pledge Interface (Southbound Interface)

The pledge interface is the southbound interface.  This interface runs the
BRSKI-EST protocol.  This interface faces into the operator's network,
receiving requests from devices to join the network.

For {{I-D.ietf-anima-bootstrapping-keyinfra}} use, the pledge interface is an
HTTPS interface.  It may run on arbitrary port numbers and due to the way
that the voucher interface pins the associated certificate it does not need
to have a specific DNS name, as it will not be verified by the pledge.

For {{I-D.ietf-anima-constrained-voucher}} use, the pledge interface is a CoAP or
CoAPS interface over UDP.  For use with CoAP/EDHOC, then a plain CoAP interface is
used, and the security (EDHOC and OSCORE) lives above CoAP.
For CoAP/DTLS (CoAPS) then there is DTLS layer below the CoAP layer.

{{I-D.richardson-anima-state-for-joinrouter}} offers some additional
mechanisms, one of which involves dynamically created IPIP tunnels.  If these
mechanisms are in use, then the southbound interface would need to support
these options as well.

The Pledge Interface requires a TLS ServerCertificate, and {{brskiestcert}}
discusses option for creating this certificate.

The Pledge Inteface does not require a public IP address, nor does it have have to run on port 443.

In an ACP application ({{I-D.ietf-anima-autonomic-control-plane}}), the Pledge Interface SHOULD
have an IPv6 ULA address from the prefix allocated to the ACP.  {{acpnoc}}
provides some options for how the Pledge Interface can be best connected to
the ACP.

Outside of the ACP context, running the Pledge interface on an IP address that has a
FQDN that resolves to that IP address (if only internally), and operating it on port 443 may have operational advantages.

### MASA client (Northbound Interface)

The MASA client interface connects outward to the Internet to speak to the
Manufacturer Authorized Signing Authority (MASA).  This is a TLS Client
interface.

Use of a TLSClientCertificate is RECOMMENDED as this may be the best way for
a manufacturer to identify clients. {{brskimasacert}} discusses options for
signing this certificate.

The MASA client interface is outgoing only and does not require any special
connectivity.  It may be placed behind a typical enterprise or residential
NAT44 gateway. IPv6 connectivity is RECOMMENDED.  It does need access to DNS,
and the DNS lookups SHOULD be validated with DNSSEC.

The MASA client interface will need to validate the server certificates of
the MASA, and to do this it will need access to the common public WebPKI ({{WebPKI}})
trust anchors to validate the MASA.  The MASA client MAY also require access to a
database of pinned certificates to validate specific manufacturers as called out for in
{{I-D.ietf-anima-bootstrapping-keyinfra}} section 2.8 and section 5.4.

### Join Proxy (Southbound Interface)

In the ACP context, the Registrar is expected to have a Join Proxy operating on the Southbound Interface in order to announce the existence of the Registrar to the local network, for the benefit of directly connected devices.  This permits the machines in the NOC itself to autonomically join the domain.

The Join Proxy MAY announce the IP address (ULA) and port of the actual Pledge Interface, rather than announcing a link-local address and then performing a proxy operation.

### EST and BRSKI GRASP announcements

As specified in {{I-D.ietf-anima-bootstrapping-keyinfra}} section 4.3, in an ACP context, the Registrar
MUST announce itself inside the ACP using GRASP.  The Registrar MUST incorporate enough of a GRASP daemon in order to perform the M_FLOOD announcements.

As specified in {{I-D.ietf-anima-autonomic-control-plane}} section 6.1.2, in an ACP context,
if the Registrar will also be providing for renewal of certificates using EST, then it SHOULD
announce itself inside the ACP using GRASP.  Unless made impossible due to loading concerns,
it is RECOMMENDED that all Registrar instances offer certificate renewal services in this fashion.

The use of {{I-D.ietf-acme-star}} Short-Term Automatically-Renewed Certificates is RECOMMENDED.
This mandates that the EST server be highly available.
If STAR-style renewals are not used, then the Certificate Authority will need to make OCSP or CRL Distribution points available.

### Certificate Authority

If the Enterprise/ISP has an existing certificate authority system that it wishes to use, then an interface to it has to be enabled.  This may run protocols like EST, CMP or ACME.

Smaller Enterprises and Residential uses of BRSKI are encouraged to use an internal (private) certificate authority. See {{certauthsecurity}} for a discussion of securing this CA.

### Management Interface

The Registrar will require a management interface.  As is the trend, this will often be a web-based single page application using AJAX API calls to perform communications.  This interface SHOULD be made available on the Southbound NOC interface only, and it MUST be on a different IP address and port number then the BRSKI-EST interface.  It should be secured with HTTPS, and use of a public ({{WebPKI}}) anchor is reasonable as it may be that the internal certificate authority may be unavailable or require maintenance.

An entirely separate process is justified with the only connection to the other procesess being the database. (This does not mean it can not share code modules)


# Connecting the Autonomic Control Plane to the Network Operations Center (NOC) {#acpnoc}

{{I-D.ietf-anima-autonomic-control-plane}} section 8.1 describes a mechanism
to connect non-ACP capable systems to the ACP.  The use of this mechanism is critical to incremental deployment of ANIMA and BRSKI in operators.

The deployment of BRSKI capable equipment would ideally occur in a concentric ring outward from the NOC.  This would start by an upgrade of the router that connects the NOC to the production network.  This device needs to support the ACP connect functionality.

It is possible, but beyond the scope of this document, to do initial connectivity of the ACP and of multiple NOCs by manually configured IPsec tunnels.  This is likely an
important step for incremental initial deployment.

The Registrar described in the next section either needs to be connected via one of the above mentioned tunnels, or it must be located on a network with ACP Connect, or it must itself be part of an automatically configured ACP.  It is quite reasonable for the Registrar to be part of a larger appliance that also includes an ACP Connect functionality.

# Public Key Infrastructure Recommendations for the Registrar {#certauthsecurity}

The Registrar requires access to, or must contain a Certificate Authority (CA).

This section deals with the situation where the CA is provided internally.
{{I-D.friel-acme-integrations}} deals with the case where the CA is provided by an external service, and the CA trust anchors are public.  These use ACME ({{RFC8555}}) is used as the interface.  That is out of scope for this document.

There are also a number of commercial offerings where a private CA is operated by an external entity using a wide variety of protocols, including proprietary ones. Those are also out of scope for this document.

The requirements for the PKI depends upon what kind of network is being managed.

## PKI recommendations for Tier-1/ISP Networks

A three-tier PKI infrastructure is appropriate for an ISP.  This entails having a root CA created with the key kept offline, and a number of intermediate CAs that have online keys that issue "day-to-day" certificates.

Whether the root private key is secured by being on a USB key kept in a safe, or via Hardware Security Module is a local decision informed by best current practices.

The root CA is then used to sign a number of intermediate entities: this will include an intermediate CA for the Registrar that is deployed into each redundant NOC location.  Multiple intermediate CAs with a common root provides significantly more security and operational flexibility than attempts to share a private key among locations.

The intermediate CA is then used to sign End-Entity certificates which are returned as part of the BRSKI-EST mechanism.

The Registrar needs client and server certificates for it's BRSKI-EST and BRSKI-MASA connections.  It is recommended that an additional intermediate CA be created for
manually issued certificates such as these.  This intermediate CA could be called
the NOC Infrastructure CA, and could be used to issue certificates for all manner
of infrastructure such as web-based monitoring tools.
The private root CA certificate should be installed into the browsers of NOC personnel.

The document {{I-D.moskowitz-ecdsa-pki}} provides some practical instructions on setting up this kind of system.  This document recommends the use of ECDSA keys for the root
and intermediate CAs, but there may be operational reasons why an RSA intermediate
CA will be required for some legacy equipment.


### Enterprise Network

A three-tier PKI infrastructure is appropriate for an ISP.  This entails having a root CA created with the key kept offline.  Whether this is done with a USB key kept in a safe, or via Hardware Security Module is a local decision.

The root CA is then used to sign a number of intermediate entities: this will include an intermediate CA for the Registrar that is deployed into each redundant NOC location.  Multiple intermediate CAs with a common root provides significantly more security and operational flexibility than attempts to share a private key among locations.

The intermediate CA is then used to sign End-Entity certificates which are returned as part of the BRSKI-EST mechanism.

The Registrar needs client and server certificates for it's BRSKI-EST and BRSKI-MASA connections.  It is recommended that an additional intermediate CA be created for
manually issued certificates such as these.  This intermediate CA could be called
the NOC Infrastructure CA, and could be used to issue certificates for all manner
of infrastructure such as web-based monitoring tools.
The private root CA certificate should be installed into the browsers of NOC personnel.

The document {{I-D.moskowitz-ecdsa-pki}} provides some practical instructions on setting up this kind of system.  This document recommends the use of ECDSA keys for the root
and intermediate CAs, but there may be operational reasons why an RSA intermediate
CA will be required for some legacy equipment.

### Home Network


# Certificates needed for the Registrar

BLAH

## TLS Server Certificate for BRSKI-EST {#brskiestcert}

TBD

## TLS Client Certificate for BRSKI-MASA {#brskimasacert}

TBD

# Privacy Considerations

YYY

# Security Considerations

ZZZ

# IANA Considerations

# Acknowledgements

Hello.

# Changelog


--- back

